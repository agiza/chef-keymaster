{
  "name": "keymaster",
  "description": "Installs/Configures KeyMaster Server",
  "long_description": "# KeyMaster - Encrypted DataBag Key Distribution Service\nThis cookbook configures a service that will distribute encryption keys across\nthe environment.\nEncrypted databags are immensely useful, but Chef doesn't provide a mechanism\nfor managing the keys. Each encrypted databag requires a symetric key. Using\nonly one symetric key for the entire system defeats the purpose of encryption.\n\nThe Keymaster cookbooks provides a method for distributing keys on nodes. It\nrequires only one Master Key that is manually copied to the keymaster server,\nand will be used to distribute all other encryption keys used in encrypted\ndatabags.\n\n## Attributes\nPath to the Master key on the keymaster server. __Keep this secure__\n```\ndefault[:keymaster][:storage][:master_key] = '/etc/keymaster/keymaster.key'\n```\n\nDirectory where all the distributed keys will be stored\n```\ndefault[:keymaster][:storage][:path] = '/etc/keymaster/keys/'\n```\n\nName of the data bag that contains the keys to be distributed\n```\ndefault[:keymaster][:key_bag_name] = 'keymaster'\n```\n\nHow often to we redistribute the key on a destination node, in minutes.\n```\ndefault[:keymaster][:distribute][:every] = 420\n```\n\nName of the keymaster system user that will be SSHing onto the destination nodes.\n```\ndefault[:keymaster][:user] = 'keymaster'\n```\n\nEnable the keymaster client recipe, should be set to `false` on the keymaster\nserver.\n```\ndefault[:keymaster][:client][:enable] = true\n```\n\n### Distribution History\nWhen keys are distributed, a history of the distribution is kept. It's a simple\nkey value hash, where the key is an identifier of the destination and the\ndistributed key, and the value is the time of last distribution.\n\n\n## Principle\n### Client side\nEach client must run the recipe `keymaster::client` in order to create a keymaster\nuser locally, and put the public SSH key of the keymaster server into\n`/home/keymaster/.ssh/authorized_keys`.\nThis keymaster server cookbook will connect to the keymaster user on each\ndestination node, and distribute the keys using SCP.\n\n### Mode of operations\n```\n\n    xxxxxxx\n   x -    -x                                        +-----------------------+\n   x   --  x                                        |                       |\n   x \\____/x                                        |   CHEF                |\n    xxxxxxx                                         |                       |\n       x        +-------------+                     |                       |\n      xxx       |enc. databag +--------------------->        SERVER         |\n     x x x      |  +---+      |         (2)         |                       |\n    x  x  x     |  |key|      |                     |                       |\n      xxx       +--+---+------+                     |                       |\n     x   x   +-----------+         __________________                       |\n    x     x  |+---------+|        /                 |                       |\n security    ||MasterKey||       /                  +-----------------------+\n focused     |+---------+|      /\n invididual  +---+-------+     /\n                 |            / (3)\n                 |(1)        /\n                 |          /\n   +-------------v---+     /\n   |                 <-----                              +-------------------+\n   |  KEYMASTER      |                     (4)           | DESTINATION       |\n   |        SERVER   +---------------------------------->|            NODE   |\n   +-----------------+                                   +-------------------+\n```\n\nSay that you need an encrypted databagXYZ for service123. You create a secret\n`secretXYZ` and encrypt databagXYZ with it. Now you want `secretXYZ` to be copied\nover the nodes A, B and C so that they can decrypt databagXYZ.\n\nThe KeyMaster cookbook does this for you.\n\n1. Create a Master Key (preferably one per environment)\n`openssl rand -base64 2048 | tr -d '\\r\\n' > ~/.chef/keymaster.key`\nCopy the key manually to the Keymaster server\n`scp ~/.chef/keymaster.key /etc/keymaster/keymaster.key`\n\n2. Using Knife, create a Keymaster encrypted databag for secretXYZ in the keymaster\ndatabag, using `keymaster.key`\n`knife data bag create --secret-file ~/.chef/keymaster.key keymaster secretXYZ`\nThe databag must contain a `destination` (chef search that returns the nodes that\nneed secretXYZ), and a `key` (secretXYZ).\n```\nid:           service123-databagXYZ-production\ndestination:  tags:service123 AND roles:python-api-node AND chef_environment:production\nkey:          kDXL84t+6LRm0Kbqqhef72......\n```\nThe encrypted version will look as follow:\n```\ndestination:  6p4obWgLtbFOWRvfNMN1RwtroTwx/9hB88xsgM5fnP6j1rMeJ/OL2Sgm8ulQ\n              3DfMn5b8E7PCoYuEa99u7Plox+JyAUHK/TiE2TGhTt16bQxQFL+ZN4YK+bv8\n              TxNZpxhgB43R+7qG+HVYAgmPu9Sr/g==\nid:           service123-databagXYZ-production\nkey:          wKEx1zGdDQfsyterl/2mLLZ68ZNsjks3ZAEo2bIDux0Ux6fh3UDztoNt2NJ1\n              xk8bhSkLtQkSNTXBPYWGGDElo1Ttx9xZC1KLUPEW2EzWy4Vb3m/UI+ly53Z9\n              3I4RMXDVl+RQl8pWMIig9SbeneUY+C8iojLkx71qmD5ksxrjehgsZPpNct3s\n              zmS5Wlxzl7HG6AYs4t084su+Yj0sRG4kkmzh0AKCjLu5nyElRtpcm63G9G5o\n              r7114Prrkqj6giDiIHmuPZE7g3cACtJwGOYTJ4yKKu2XvCs7QyYOYYP++ycS\n              iMvp4fMv3XN+quWd4wCy/zpjssmLr+YveZzk5E6acCkPdu4Fkumb8JZKgtic\n              +OlTNKsA8E8r7i9yDesNi1Xnq5/Kro\n```\n3. During provisioning, the Keymaster will retrieve the encrypted databag from\nchef-server, decrypt the keys and store them locally.\n4. The destination of each key is resolved, and keymaster uses `scp` to send the\nkeys over to the destination nodes.\n## Keymaster server directories organization\nInside the keymaster, all keys are stored in the directory defined in\n`default[:keymaster][:storage][:path]` (default to `/etc/keymaster/keys/`). The\ncookbooks stored the keys unencrypted and uses SSH to copy them over to the\ndestination nodes.\nThe Master Key must be stored at the location of `default[:keymaster][:storage][:master_key]`\n(defaults to `/etc/keymaster/keymaster.key`). It is stored unencrypted.\n\n### Key re-distribution\nThe Keymaster does not have a reliable way to determine if a key has changed on\nthe destination node. Therefore, keys are overwritten on a regular basis (defaults\nto 420 minutes - 7 hours - and defined by `default[:keymaster][:distribute][:every]`).\n\nThe keymaster keeps history of when a key was distributed to a node, this history\nis kept in a node attribute `node[:keymaster][:history]`. Node names are hashes\nto prevent information leakage from the history.\n\n## Data Bag Items Decryption\n`Keymaster` is stricly a key distribution service. It does not care for what you\nencrypt using the keys it distributes.\nNevertheless, `Keymaster` provides a function that can be used in recipes of\nother cookbook to decrypt data bag items.\n\nA cookbook that `depends \"keymaster\"` can use the following code to decrypt\nan encrypted databag:\n```\n  key_location = \"#{node['keymaster']['storage']['path']}/cookbooksecure.key\"\n  dbag_item = {}\n  begin\n    dbag_item = Keymaster.decrypt_data_bag_item(\"mydatabag\",\n                                                \"myitem\",\n                                                key_location)\n  rescue IOError\n    Chef::Log.info(\"Decryption failed. Moving on.\")\n    return true\n  end\n```\nThe variable `dbag_item` will receive a hash with the decrypted values, that can\nbe used in a template or anywhere else in the recipe.\n\n__Note:__ The cookbook must have `depends \"keymaster\"` in its `metadata.rb` in\norder to have access to this `Keymaster` module function.\n\n__Note:__ If the begin/rescue block catches an IOError exception, the processing of\nthe entire recipe will *NOT* fail.  Only the resources listed *after* the begin/rescue\nblock will be skipped.  To make the recipe truly atomic and prevent a recipe from\nbeing partially deployed, either put the begin/rescue block at the top of your recipe,\nor put all of the resources in the 'begin' portion of the block.\n\n## Vagrant\nThe vagrant VMs come with a master key by default, such that the keymaster VM\ncan be provisionned without having to recreate a key.\nThe key is:\n```\n+Vrfxe35zyoqYFon7DrMEiudouoJutm8lNoOHSHXsTVCgjcALmwCXkVgR0vyJ+h4mPI0l3wCUC7aiTxcJsPWlSIvvLhcmJv2YVyjnerDZ0Z/y9rdab2yYJLV+gE1LnSZD4LHk/0AsF5nOCZVXwdjFDxq70TZUJcm19t27OUlvPwf3cG9LoAaH5p0SRvomkNCAqRNrn0323pj8vTicTtbosPDEVapuXh8pJwWedSu8Em4/qyG6TJzU3XMB/Q993UBwzNYnzzmGMJj+PuF91bLWqj/HF6rctHvyNex/ASew5chsAebCRDG8f7G8hv7x3n2phDzKyRK8w1/hXywh85IUDLdI/sNlJy1ZR1iOHC/RaUa8MUL1trLlD8TA4JW1ifPKnp4zMSIf880r8Po6kCnxlD8WLCxx1sVK92BtSuysr9qYPJU5ghzDv6+O6mNqUDY+MoSiryiAW7oDKWmQOKM2CekmSO9/VuYTzgbOxY+bfscQIUvONJX46n/4OH80OVcayjcf6C6FjMBEhD7owfA6BbrXSju08IcdH6KTAH4FEGjexXpSTHhf7QAUh77x6CES55CLMvWw17spI+W1lgc/NC2czAPoOtTg+wxWSzNzwPBfdD3jVaZCH+qyfYtkONkaqCvMVbLrUmBmLLNNJodBgQQf99cQYtmr18mU1MWaCM=\n```\n",
  "maintainer": "AWeber Communications - Julien Vehent",
  "maintainer_email": "julienv@aweber.com",
  "license": "All rights reserved",
  "platforms": {
  },
  "dependencies": {
    "ohai": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  },
  "version": "0.0.3"
}